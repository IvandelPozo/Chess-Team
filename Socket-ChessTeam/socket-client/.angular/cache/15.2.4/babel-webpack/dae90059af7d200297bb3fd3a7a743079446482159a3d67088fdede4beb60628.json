{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { interval } from 'rxjs';\nimport { memberNameValidator } from './Validators/memberDuplicats';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../Serveis/Chess/chess.service\";\nimport * as i3 from \"@angular/common\";\nfunction EquipsComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"p\");\n    i0.ɵɵtext(2, \"El nom del jugador 2 no pot ser igual al del jugador 1\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class EquipsComponent {\n  constructor(fb, socket) {\n    this.fb = fb;\n    this.socket = socket;\n  }\n  ngOnInit() {\n    this.socket.getErrorDuplicated().subscribe(msg => {\n      this.msgErrorDuplicated = msg;\n    });\n    interval(8000).subscribe(() => {\n      this.msgErrorDuplicated = '';\n    });\n    this.equipsForm = this.fb.group({\n      nomEquip: ['', Validators.required],\n      nomJugador1: ['', Validators.required],\n      nomJugador2: ['', Validators.required]\n    }, {\n      validators: [memberNameValidator]\n    });\n  }\n  entrarEquip(formGroup) {\n    this.equipsForm.get('nomEquip')?.setValue(formGroup.value.nomEquip.trim());\n    this.equipsForm.get('nomJugador1')?.setValue(formGroup.value.nomJugador1.trim());\n    this.equipsForm.get('nomJugador2')?.setValue(formGroup.value.nomJugador2.trim());\n    this.socket.addTeam(formGroup.value.nomEquip, formGroup.value.nomJugador1, formGroup.value.nomJugador2);\n    formGroup.reset();\n  }\n}\nEquipsComponent.ɵfac = function EquipsComponent_Factory(t) {\n  return new (t || EquipsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ChessService));\n};\nEquipsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EquipsComponent,\n  selectors: [[\"app-equips\"]],\n  decls: 15,\n  vars: 4,\n  consts: [[3, \"formGroup\"], [\"type\", \"text\", \"formControlName\", \"nomEquip\"], [\"type\", \"text\", \"formControlName\", \"nomJugador1\"], [\"type\", \"text\", \"formControlName\", \"nomJugador2\"], [\"type\", \"button\", 3, \"disabled\", \"click\"], [1, \"redColor\"], [\"class\", \"redColor\", 4, \"ngIf\"]],\n  template: function EquipsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"label\");\n      i0.ɵɵtext(2, \"Nom equip:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"input\", 1);\n      i0.ɵɵelementStart(4, \"label\");\n      i0.ɵɵtext(5, \"Jugador 1:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 2);\n      i0.ɵɵelementStart(7, \"label\");\n      i0.ɵɵtext(8, \"Jugador 2:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 3);\n      i0.ɵɵelementStart(10, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function EquipsComponent_Template_button_click_10_listener() {\n        return ctx.entrarEquip(ctx.equipsForm);\n      });\n      i0.ɵɵtext(11, \"Entrar\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"pre\", 5);\n      i0.ɵɵtext(13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, EquipsComponent_div_14_Template, 3, 0, \"div\", 6);\n    }\n    if (rf & 2) {\n      let tmp_3_0;\n      i0.ɵɵproperty(\"formGroup\", ctx.equipsForm);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"disabled\", !ctx.equipsForm.valid);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"        \", ctx.msgErrorDuplicated, \"\\n\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.equipsForm.hasError(\"duplicateMemberName\") && ((tmp_3_0 = ctx.equipsForm.get(\"nomJugador2\")) == null ? null : tmp_3_0.dirty));\n    }\n  },\n  dependencies: [i3.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\".redColor[_ngcontent-%COMP%] {\\r\\n    color: red;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvUHJvamVjdGUvQ29tcG9uZW50cy9lcXVpcHMvZXF1aXBzLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxVQUFVO0FBQ2QiLCJzb3VyY2VzQ29udGVudCI6WyIucmVkQ29sb3Ige1xyXG4gICAgY29sb3I6IHJlZDtcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;AACnE,SAASC,QAAQ,QAAQ,MAAM;AAE/B,SAASC,mBAAmB,QAAQ,8BAA8B;;;;;;;ICYlEC,8BAC+D;IACpDA,sEAAsD;IAAAA,iBAAI;;;ADPrE,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,EAAe,EAAUC,MAAoB;IAA7C,OAAE,GAAFD,EAAE;IAAuB,WAAM,GAANC,MAAM;EAAkB;EAErEC,QAAQA;IACN,IAAI,CAACD,MAAM,CAACE,kBAAkB,EAAE,CAACC,SAAS,CAAEC,GAAQ,IAAI;MACtD,IAAI,CAACC,kBAAkB,GAAGD,GAAG;IAC/B,CAAC,CAAC;IAEFV,QAAQ,CAAC,IAAI,CAAC,CAACS,SAAS,CAAC,MAAK;MAC5B,IAAI,CAACE,kBAAkB,GAAG,EAAE;IAC9B,CAAC,CAAC;IAEF,IAAI,CAACC,UAAU,GAAG,IAAI,CAACP,EAAE,CAACQ,KAAK,CAAC;MAC9BC,QAAQ,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACgB,QAAQ,CAAC;MACnCC,WAAW,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACgB,QAAQ,CAAC;MACtCE,WAAW,EAAE,CAAC,EAAE,EAAElB,UAAU,CAACgB,QAAQ;KACtC,EAAE;MAAEG,UAAU,EAAE,CAACjB,mBAAmB;IAAC,CAAE,CAAC;EAC3C;EAEAkB,WAAWA,CAACC,SAAoB;IAC9B,IAAI,CAACR,UAAU,CAACS,GAAG,CAAC,UAAU,CAAC,EAAEC,QAAQ,CAACF,SAAS,CAACG,KAAK,CAACT,QAAQ,CAACU,IAAI,EAAE,CAAC;IAC1E,IAAI,CAACZ,UAAU,CAACS,GAAG,CAAC,aAAa,CAAC,EAAEC,QAAQ,CAACF,SAAS,CAACG,KAAK,CAACP,WAAW,CAACQ,IAAI,EAAE,CAAC;IAChF,IAAI,CAACZ,UAAU,CAACS,GAAG,CAAC,aAAa,CAAC,EAAEC,QAAQ,CAACF,SAAS,CAACG,KAAK,CAACN,WAAW,CAACO,IAAI,EAAE,CAAC;IAEhF,IAAI,CAAClB,MAAM,CAACmB,OAAO,CAACL,SAAS,CAACG,KAAK,CAACT,QAAQ,EAAEM,SAAS,CAACG,KAAK,CAACP,WAAW,EAAEI,SAAS,CAACG,KAAK,CAACN,WAAW,CAAC;IACvGG,SAAS,CAACM,KAAK,EAAE;EACnB;;AA7BWvB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX5B7B,+BAAoC;MACrBA,0BAAU;MAAAA,iBAAQ;MACzBA,2BAA8C;MAE9CA,6BAAO;MAAAA,0BAAU;MAAAA,iBAAQ;MACzBA,2BAAiD;MAEjDA,6BAAO;MAAAA,0BAAU;MAAAA,iBAAQ;MACzBA,2BAAiD;MAEjDA,kCAC0C;MAAlCA;QAAA,OAAS8B,+BAAuB;MAAA,EAAC;MAAC9B,uBAAM;MAAAA,iBAAS;MAEjEA,+BAAsB;MACdA,aACR;MAAAA,iBAAM;MACNA,kEAGM;;;;MAnBAA,0CAA6B;MAULA,gBAAmC;MAAnCA,gDAAmC;MAIzDA,eACR;MADQA,+DACR;MACMA,eACsC;MADtCA,uJACsC","names":["Validators","interval","memberNameValidator","i0","EquipsComponent","constructor","fb","socket","ngOnInit","getErrorDuplicated","subscribe","msg","msgErrorDuplicated","equipsForm","group","nomEquip","required","nomJugador1","nomJugador2","validators","entrarEquip","formGroup","get","setValue","value","trim","addTeam","reset","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\juaca\\OneDrive\\Escriptori\\2DAW\\ANGULAR\\Socket-ChessTeam\\socket-client\\src\\app\\Projecte\\Components\\equips\\equips.component.ts","C:\\Users\\juaca\\OneDrive\\Escriptori\\2DAW\\ANGULAR\\Socket-ChessTeam\\socket-client\\src\\app\\Projecte\\Components\\equips\\equips.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { interval } from 'rxjs';\nimport { ChessService } from '../../Serveis/Chess/chess.service';\nimport { memberNameValidator } from './Validators/memberDuplicats';\n\n@Component({\n  selector: 'app-equips',\n  templateUrl: './equips.component.html',\n  styleUrls: ['./equips.component.css']\n})\nexport class EquipsComponent implements OnInit {\n  equipsForm!: FormGroup;\n  msgErrorDuplicated!: string;\n\n  constructor(private fb: FormBuilder, private socket: ChessService) { }\n\n  ngOnInit(): void {\n    this.socket.getErrorDuplicated().subscribe((msg: any) => {\n      this.msgErrorDuplicated = msg;\n    });\n\n    interval(8000).subscribe(() => {\n      this.msgErrorDuplicated = '';\n    });\n\n    this.equipsForm = this.fb.group({\n      nomEquip: ['', Validators.required],\n      nomJugador1: ['', Validators.required],\n      nomJugador2: ['', Validators.required]\n    }, { validators: [memberNameValidator] })\n  }\n\n  entrarEquip(formGroup: FormGroup): void {\n    this.equipsForm.get('nomEquip')?.setValue(formGroup.value.nomEquip.trim());\n    this.equipsForm.get('nomJugador1')?.setValue(formGroup.value.nomJugador1.trim());\n    this.equipsForm.get('nomJugador2')?.setValue(formGroup.value.nomJugador2.trim());\n\n    this.socket.addTeam(formGroup.value.nomEquip, formGroup.value.nomJugador1, formGroup.value.nomJugador2);\n    formGroup.reset();\n  }\n}","<form [formGroup]=\"this.equipsForm\">\n        <label>Nom equip:</label>\n        <input type=\"text\" formControlName=\"nomEquip\">\n\n        <label>Jugador 1:</label>\n        <input type=\"text\" formControlName=\"nomJugador1\">\n\n        <label>Jugador 2:</label>\n        <input type=\"text\" formControlName=\"nomJugador2\">\n\n        <button type=\"button\" [disabled]=\"!this.equipsForm.valid\"\n                (click)=\"entrarEquip(equipsForm)\">Entrar</button>\n</form>\n<pre class=\"redColor\">\n        {{msgErrorDuplicated}}\n</pre>\n<div *ngIf=\"equipsForm.hasError('duplicateMemberName') &&\n        equipsForm.get('nomJugador2')?.dirty\" class=\"redColor\">\n        <p>El nom del jugador 2 no pot ser igual al del jugador 1</p>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}